# -*- coding: utf-8 -*-
"""PAVI10

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IlD099sQS0DCgPJVLAMeEEZOU0X0oMHf
"""

import numpy as np
import librosa
import matplotlib.pyplot as plt

# загрузка файла
def load_audio(filename):
    audio_data, sample_rate = librosa.load(filename)
    return audio_data, sample_rate

# вычисление спектрограммы
def compute_spectrogram(audio_data, sample_rate):
    n_fft = 2048
    hop_length = 512
    window = np.hanning(n_fft)
    stft = librosa.stft(audio_data, n_fft=n_fft, hop_length=hop_length, window=window)
    spectrogram = np.abs(stft)
    log_spectrogram = librosa.amplitude_to_db(spectrogram, ref=np.max)
    return log_spectrogram, sample_rate, n_fft

# визуализация спектограмы
def plot_spectrogram(log_spectrogram, sample_rate, filename, name):
    plt.figure(figsize=(12, 6))
    librosa.display.specshow(log_spectrogram, sr=sample_rate, x_axis='time', y_axis='log')
    plt.colorbar(format='%+2.0f dB')
    plt.title(f'Исходная спектрограмма для {name}')
    plt.savefig(f'spectrogram_{filename[:-4]}.png', bbox_inches='tight')
    plt.show()

# мин и макс частоты голоса
def find_voice_range(log_spectrogram, sample_rate, n_fft):
    min_freq = np.min(np.where(log_spectrogram > -60)[0])
    max_freq = np.max(np.where(log_spectrogram > -60)[0])
    print(f"Минимальная частота голоса: {min_freq * sample_rate / n_fft} Гц")
    print(f"Максимальная частота голоса: {max_freq * sample_rate / n_fft} Гц")

# основной тон
def find_fundamental_frequency(log_spectrogram, sample_rate, n_fft):
    harmonic_product_spectrum = np.prod(log_spectrogram, axis=1)
    fundamental_freq = np.argmax(harmonic_product_spectrum) * sample_rate / n_fft
    print(f"Основной тон: {fundamental_freq} Гц")
    return fundamental_freq

# нахождение трех самых сильных формант
def find_formants(log_spectrogram, sample_rate, n_fft):
    time_step = int(0.1 * sample_rate / 512)
    time_slices = range(0, log_spectrogram.shape[1], time_step)
    formants = []
    for i in range(len(time_slices) - 1):
        start = time_slices[i]
        end = time_slices[i + 1]
        segment = log_spectrogram[:, start:end]

        freq_bins = np.arange(segment.shape[0]) * sample_rate / n_fft  # частоты
        peaks = np.argsort(np.max(segment, axis=1))[-3:]               # индексы трех максимальных пиков

        formants.append([freq_bins[peak] for peak in peaks])

    print("Три самые сильные форманты:")
    for i, formant in enumerate(formants):
        print(f"Временной сегмент {i}: {[f'{freq:.0f} Гц' for freq in formant]}")

    return formants


def save_results(filename, min_freq, max_freq, fundamental_freq, formants, sample_rate, n_fft):
    with open(f"{filename[:-4]}_results.txt", "w", encoding="utf-8") as f:
        f.write(f"Результаты анализа звукового файла: {filename}\n\n")
        f.write(f"Минимальная частота голоса: {min_freq * sample_rate / n_fft} Гц\n")
        f.write(f"Максимальная частота голоса: {max_freq * sample_rate / n_fft} Гц\n\n")
        f.write(f"Основной тон: {fundamental_freq} Гц\n\n")
        f.write("Три самые сильные форманты:\n")
        for j, formant in enumerate(formants):
            f.write(f"Временной сегмент {j}: {[f'{freq:.0f} Гц' for freq in formant]}\n")

def main():
    name_filename = ["a.wav", "i.wav", "meow.wav"]
    name_filename_1 = ["звука а", "звука и", "звука мяу"]

    for i in range(len(name_filename)):
        filename = name_filename[i]
        name = name_filename_1[i]

        audio_data, sample_rate = load_audio(filename)

        log_spectrogram, sample_rate, n_fft = compute_spectrogram(audio_data, sample_rate)

        plot_spectrogram(log_spectrogram, sample_rate, filename, name)

        find_voice_range(log_spectrogram, sample_rate, n_fft)

        fundamental_freq = find_fundamental_frequency(log_spectrogram, sample_rate, n_fft)

        formants = find_formants(log_spectrogram, sample_rate, n_fft)

        min_freq = np.min(np.where(log_spectrogram > -60)[0])
        max_freq = np.max(np.where(log_spectrogram > -60)[0])

        save_results(filename, min_freq, max_freq, fundamental_freq, formants, sample_rate, n_fft)


if __name__ == "__main__":
    main()