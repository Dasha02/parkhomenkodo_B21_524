# -*- coding: utf-8 -*-
"""PAVI9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GqXmKNYV36mPFJddf46qrszkaT2I42DR
"""

import numpy as np
import matplotlib.pyplot as plt
import librosa
import librosa.display


# Функция для фильтра Винера
def wiener_filter(data, window_size):
    filtered_data = np.zeros_like(data)
    window = np.ones(window_size) / window_size
    for i in range(data.size):
        start = max(0, i - window_size // 2)
        end = min(data.size, i + window_size // 2 + 1)
        window_data = data[start:end]
        mu = np.mean(window_data)
        sigma_square = np.var(window_data)
        filtered_data[i] = mu + (data[i] - mu) * (sigma_square / (sigma_square + 1))
    return filtered_data

def main(smth=None):
    filename = "git1.wav"
    audio_data, sample_rate = librosa.load(filename)

    # Параметры Фурье
    n_fft = 2048
    hop_length = 512
    window = np.hanning(n_fft)

    # Вычисление спектрограммы
    stft = librosa.stft(audio_data, n_fft=n_fft, hop_length=hop_length, window=window)
    spectrogram = np.abs(stft)
    log_spectrogram = librosa.amplitude_to_db(spectrogram, ref=np.max)

    # Визуализация исходной спектрограммы
    plt.figure(figsize=(12, 6))
    librosa.display.specshow(log_spectrogram, sr=sample_rate, x_axis='time', y_axis='log')
    plt.colorbar(format='%+2.0f dB')
    plt.title('Исходная спектрограмма')
    plt.savefig('original_spectrogram.png', bbox_inches='tight')

    # Удаление шума с помощью фильтра Винера
    denoised_audio_wiener = wiener_filter(audio_data, window_size=51)

    # Вычисление спектрограмм после удаления шума
    denoised_stft_wiener = librosa.stft(denoised_audio_wiener, n_fft=n_fft, hop_length=hop_length, window=window)
    denoised_spectrogram_wiener = np.abs(denoised_stft_wiener)
    denoised_log_spectrogram_wiener = librosa.amplitude_to_db(denoised_spectrogram_wiener, ref=np.max)

    # Визуализация спектрограмм после удаления шума
    plt.figure(figsize=(12, 6))
    librosa.display.specshow(denoised_log_spectrogram_wiener, sr=sample_rate, x_axis='time', y_axis='log')
    plt.colorbar(format='%+2.0f dB')
    plt.title('Спектрограмма после фильтра Винера')
    plt.savefig('wiener_spectrogram.png', bbox_inches='tight')
    plt.show()

    # Сравнение исходной и восстановленных звуковых дорожек
    plt.figure(figsize=(12, 6))
    plt.plot(audio_data, label='Исходная')
    plt.plot(denoised_audio_wiener, label='Фильтр Винера')
    plt.xlabel('Время (отсчеты)')
    plt.ylabel('Амплитуда')
    plt.legend()
    plt.title('Сравнение исходной и восстановленной звуковой дорожки (Винера)')
    plt.savefig('audio_comparison_wiener.png', bbox_inches='tight')
    plt.show()


    # Нахождение моментов времени с наибольшей энергией
    energy_spectrogram = spectrogram ** 2
    times = librosa.core.power_to_db(energy_spectrogram, ref=np.max)
    frequencies = librosa.fft_frequencies(sr=sample_rate, n_fft=n_fft)

    energies = np.abs(energy_spectrogram)

    time_step = hop_length / sample_rate

    max_energy_times = []
    max_energy_frequencies = []
    max_energies = []

    # Находим все максимальные значения энергии
    for i in range(len(times)):
        for j in range(len(energies[i])):
            energy = energies[i, j]
            max_energies.append(energy)
            max_energy_time = librosa.frames_to_time(i, sr=sample_rate, hop_length=hop_length)
            max_energy_frequency = frequencies[j]
            max_energy_times.append(max_energy_time)
            max_energy_frequencies.append(max_energy_frequency)

    # Сортируем списки по убыванию энергии
    sorted_max_energies, sorted_max_energy_times, sorted_max_energy_frequencies = zip(*sorted(zip(max_energies, max_energy_times, max_energy_frequencies), reverse=True))


    # Открываем файл для записи
    with open("max_energy_times.txt", "w") as file:
        file.write("Моменты времени с наибольшей энергией:\n")
        for t, f, e in zip(sorted_max_energy_times, sorted_max_energy_frequencies, sorted_max_energies):
            file.write(f"Время: {t:.2f} с, Частота: {f:.2f} Гц, Энергия: {e:.2f}\n")

if __name__ == "__main__":
    main()