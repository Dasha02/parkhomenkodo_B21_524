# -*- coding: utf-8 -*-
"""PAVI-Laba2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M8hTjujtHn6Aim5-tQ_ylq5OY7dkPsXL
"""

import numpy as np
from PIL import Image


def convert_to_gray(image):
    img_array = np.array(image)
    height, width, channels = img_array.shape
    gray_array = np.zeros((height, width), dtype=np.uint8)

    for i in range(height):
        for j in range(width):
            if channels == 4:
                r, g, b, _ = img_array[i, j]
            else:
                r, g, b = img_array[i, j]

            brightness = int(0.2989 * r + 0.5870 * g + 0.1140 * b)

            gray_array[i, j] = brightness

    gray_image = Image.fromarray(gray_array)

    return gray_image

def convert_to_binary(image):
    img_array = np.array(image)
    height, width = img_array.shape
    threshold = threshold_otsu(img_array)
    # бинарное изображение
    binary_array = np.zeros((height, width), dtype=np.uint8)
    binary_array[img_array > threshold] = 255

    binary_image = Image.fromarray(binary_array)

    return binary_image

def threshold_otsu(image):
    hist, _ = np.histogram(image.flatten(), bins=256, range=[0,256])

    hist_norm = hist.astype(np.float32) / np.sum(hist)

    sigma_b_max = 0.0
    threshold = 0

    for t in range(256):

        p0 = np.sum(hist_norm[:t])  # Вероятность 0
        p1 = np.sum(hist_norm[t:])  # Вероятность 1

        if p0 == 0.0 or p1 == 0.0:
            continue

        mean0 = np.sum(hist_norm[:t] * np.arange(t)) / p0
        mean1 = np.sum(hist_norm[t:] * np.arange(t, 256)) / p1

        sigma_b = p0 * p1 * (mean0 - mean1)**2

        if sigma_b > sigma_b_max:
            sigma_b_max = sigma_b
            threshold = t

    return threshold


def main(smth=None):
    input_image = Image.open('im1.png')

    gray_image = convert_to_gray(input_image)
    gray_image.save('gray_image_im1.bmp')

    binary_image = convert_to_binary(gray_image)
    binary_image.save('binary_image_im1.bmp')

    input_image = Image.open('im2.png')

    gray_image = convert_to_gray(input_image)
    gray_image.save('gray_image_im2.bmp')

    binary_image = convert_to_binary(gray_image)
    binary_image.save('binary_image_im2.bmp')


if __name__ == "__main__":
    main()







